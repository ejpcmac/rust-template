{{license-header}}
//! Cargo xtasks for {{project-name}}.

use std::{
    env,
    process::{self, Command},
};

use colored::Colorize;
use xshell::{Shell, cmd};

struct Context {
    pub sh: Shell,
    pub checks: usize,
    pub errors: usize,
}

impl Context {
    pub fn new() -> Self {
        Self {
            sh: Shell::new().unwrap(),
            checks: 0,
            errors: 0,
        }
    }
}{% if project-kind == "embedded" %}

const BOARDS: &str = "feather-nrf52840,nucleo-l476rg";{% endif %}

fn main() {
    let mut args = env::args().skip(1);

    match args.next().as_deref() {
        Some("check") => check(args.next().as_deref()),{% if project-kind == "embedded" %}
        Some("update") => update(),{% endif %}
        _ => usage(),
    }
}

fn usage() {
    let name = env::args().next().unwrap();
    eprintln!("usage: {name} <check{% if project-kind == "embedded" %}|update{% endif %}>");
    process::exit(1);
}

////////////////////////////////////////////////////////////////////////////////
//                                  Commands                                  //
////////////////////////////////////////////////////////////////////////////////

fn check(subcommand: Option<&str>) {
    let mut ctx = Context::new();

    match subcommand {
        None => {
            check_commits(&mut ctx);
            check_format(&mut ctx);
            build(&mut ctx);
            check_doc(&mut ctx);
            test(&mut ctx);
            check_unused_deps(&mut ctx);{% if project-type == "CLI" %}
            check_packages(&mut ctx);{% endif %}
        }
        Some("commits") => check_commits(&mut ctx),
        Some("format") => check_format(&mut ctx),
        Some("build") => build(&mut ctx),
        Some("doc") => check_doc(&mut ctx),
        Some("test") => test(&mut ctx),
        Some("unused-deps") => check_unused_deps(&mut ctx),{% if project-type == "CLI" %}
        Some("packages") => check_packages(&mut ctx),{% endif %}
        _ => check_usage(),
    }

    check_result(&ctx);
}

fn check_usage() {
    let name = env::args().next().unwrap();
    eprintln!(
        "usage: {name} check [commits|format|build|doc|test|unused-deps{% if project-type == "CLI" %}|packages{% endif %}]"
    );
    process::exit(1);
}{% if project-kind == "embedded" %}

fn update() {
    let mut sh = Shell::new().unwrap();
    update_workspace(&mut sh, ".", "hardware-agnostic packages");
    update_workspace(&mut sh, "firmware", "firmware packages");
}

fn update_workspace(sh: &mut Shell, workspace: &str, name: &str) {
    let message = format!("\n==> Updating the dependencies for {name}...")
        .bold()
        .to_string();
    println!("{message}");

    let _push_dir = sh.push_dir(workspace);
    cmd!(sh, "cargo update").run().unwrap();
}{% endif %}

//////////////////////////////////// Checks ////////////////////////////////////

fn check_commits(ctx: &mut Context) {
    let is_pull_request =
        env::var_os("IS_PULL_REQUEST").is_some_and(|val| val == "true");

    let commits = if is_pull_request {
        Some(String::from("HEAD~..HEAD^2"))
    } else {
        let branch = get_current_branch();

        if ["main", "develop"].contains(&branch.as_str()) {
            None
        } else {
            let merge_base = get_merge_base("origin/develop");
            Some(format!("{merge_base}..HEAD"))
        }
    };

    if let Some(commits) = commits {
        action!(
            ctx,
            step!(
                "Listing the commits to check",
                "git --no-pager log --pretty=format:'%C(yellow)%h%Creset %s' {commits}",
            ),
            step!(
                "Checking that commits are conventional",
                "committed {commits}",
            ),
        );
    }
}

fn check_format(ctx: &mut Context) {
    let editorconfig_excluded_files =
        ["**.lock", "**.rs", "**.toml", "LICENSE"];

    let exclude = format!({{'"{{{}}}"'}}, editorconfig_excluded_files.join(","));

    action!(
        ctx,
        "Checking for compliance with Editorconfig",
        "eclint -exclude {exclude}",
    );
{% if project-kind == "embedded" %}
    action!(
        ctx,
        "Checking that the Rust code is formatted in hardware-agnostic packages",
        "cargo fmt --all --check",
    );

    action!(
        ctx,
        "Checking that the Rust code is formatted in firmware packages",
        "cargo fmt --manifest-path=firmware/Cargo.toml --all --check",
    );
{% else %}
    action!(
        ctx,
        "Checking that the Rust code is formatted",
        "cargo fmt --all --check",
    );
{% endif%}
    action!(
        ctx,
        "Checking that the Nix code is formatted",
        "nixpkgs-fmt --check .",
    );

    action!(
        ctx,
        "Checking that TOML documents are formatted",
        "taplo fmt --check",
    );

    action!(
        ctx,
        "Checking that YAML and JSON documents are formatted",
        "prettier --check ."
    );

    action!(ctx, "Checking for typos", "typos");
}

fn build(ctx: &mut Context) {
    action!(
        ctx,
        "Building all{% if project-kind == "embedded" %} hardware-agnostic{% endif %} packages for all feature combinations",
        "cargo hack build --no-dev-deps --workspace --feature-powerset --skip rust-analyzer --keep-going",
    );{% if project-kind == "embedded" %}

    action!(
        ctx,
        cwd: "firmware",
        "Building all firmware packages for all feature combinations",
        "cargo hack build --no-dev-deps --workspace --feature-powerset --at-least-one-of {BOARDS} --mutually-exclusive-features {BOARDS} --skip rust-analyzer --keep-going",
    );{% endif %}

    action!(
        ctx,
        "Checking for clippy warnings in all{% if project-kind == "embedded" %} hardware-agnostic{% endif %} packages for all feature combinations",
        "cargo hack clippy --no-dev-deps --workspace --feature-powerset --skip rust-analyzer --keep-going -- -D warnings",
    );

    action!(
        ctx,
        "Checking for clippy warnings in all{% if project-kind == "embedded" %} hardware-agnostic{% endif %} packages for all targets and all feature combinations",
        "cargo hack clippy --workspace --all-targets --feature-powerset --skip rust-analyzer --keep-going -- -D warnings",
    );{% if project-kind == "embedded" %}

    action!(
        ctx,
        cwd: "firmware",
        "Checking for clippy warnings in all firmware packages for all feature combinations",
        "cargo hack clippy --no-dev-deps --workspace --feature-powerset --at-least-one-of {BOARDS} --mutually-exclusive-features {BOARDS} --skip rust-analyzer --keep-going -- -D warnings",
    );{% endif %}
}

fn check_doc(ctx: &mut Context) {
    ctx.sh.set_var("RUSTDOCFLAGS", "-D warnings");

    action!(
        ctx,
        "Checking that the documentation builds without warnings{% if project-kind == "embedded" %} for hardware-agnostic packages{% endif %}",
        "cargo hack doc --no-deps --document-private-items --workspace --exclude xtask --feature-powerset --skip rust-analyzer --keep-going"
    );{% if project-kind == "embedded" %}

    action!(
        ctx,
        cwd: "firmware",
        "Checking that the documentation builds without warnings for firmware packages",
        "cargo hack doc --no-deps --document-private-items --workspace --feature-powerset --at-least-one-of {BOARDS} --mutually-exclusive-features {BOARDS} --skip rust-analyzer --keep-going"
    );{% endif %}
}

fn test(ctx: &mut Context) {
    action!(
        ctx,
        step!(
            "Building the tests for all{% if project-kind == "embedded" %} hardware-agnostic{% endif %} packages for all feature combinations",
            "cargo hack nextest run --no-run --workspace --exclude xtask --feature-powerset --skip rust-analyzer --keep-going",
        ),
        step!(
            "Running the tests for all{% if project-kind == "embedded" %} hardware-agnostic{% endif %} packages for all feature combinations",
            "cargo hack nextest run --no-tests=warn --workspace --exclude xtask --feature-powerset --skip rust-analyzer --keep-going",
        ),
        // step!(
        //     "Running the doctests for all{% if project-kind == "embedded" %} hardware-agnostic{% endif %} packages for all feature combinations",
        //     "cargo hack test --doc --workspace --exclude xtask --feature-powerset --skip rust-analyzer --keep-going",
        // ),
    );
}

fn check_unused_deps(ctx: &mut Context) {
    #[cfg(not(target_os = "windows"))]
    {
        action!(
            ctx,
            "Looking for unused dependencies{% if project-kind == "embedded" %} in hardware-agnostic packages{% endif %}",
            "nix develop -L .#udeps -c cargo hack udeps --workspace --feature-powerset --skip rust-analyzer --keep-going",
        );

        action!(
            ctx,
            "Looking for unused dev-dependencies{% if project-kind == "embedded" %} in hardware-agnostic packages{% endif %}",
            "nix develop -L .#udeps -c cargo hack udeps --workspace --all-targets --feature-powerset --skip rust-analyzer --keep-going",
        );{% if project-kind == "embedded" %}

        action!(
            ctx,
            cwd: "firmware",
            "Looking for unused dependencies in firmware packages",
            "nix develop -L ..#udeps -c cargo hack udeps --workspace --feature-powerset --at-least-one-of {BOARDS} --mutually-exclusive-features {BOARDS} --skip rust-analyzer --keep-going",
        );{% endif %}
    }

    #[cfg(target_os = "windows")]
    {
        action!(
            ctx,
            "Looking for unused dependencies{% if project-kind == "embedded" %} in hardware-agnostic packages{% endif %}",
            "cargo +nightly hack udeps --workspace --feature-powerset --skip rust-analyzer --keep-going",
        );

        action!(
            ctx,
            "Looking for unused dev-dependencies{% if project-kind == "embedded" %} in hardware-agnostic packages{% endif %}",
            "cargo +nightly hack udeps --workspace --all-targets --feature-powerset --skip rust-analyzer --keep-going",
        );{% if project-kind == "embedded" %}

        action!(
            ctx,
            cwd: "firmware",
            "Looking for unused dependencies in firmware packages",
            "cargo +nightly hack udeps --workspace --feature-powerset --at-least-one-of {BOARDS} --mutually-exclusive-features {BOARDS} --skip rust-analyzer --keep-going",
        );{% endif %}
    }
}
{% if project-type == "CLI" %}
fn check_packages(ctx: &mut Context) {
    #[cfg(not(target_os = "windows"))]
    action!(
        ctx,
        "Checking that the {{project-name}} Nix package builds properly",
        "nix build -L --no-link .#{{project-name}}",
    );

    #[cfg(target_os = "linux")]
    action!(
        ctx,
        "Checking that the Debian package builds properly",
        "nix develop -L .#deb -c cargo deb --target=x86_64-unknown-linux-musl",
    );

    #[cfg(target_os = "windows")]
    action!(
        ctx,
        "Checking that the MSI package builds properly",
        "cargo wix --package {{project-name}} --nocapture",
    );
}
{% endif %}
////////////////////////////////////////////////////////////////////////////////
//                                  Helpers                                   //
////////////////////////////////////////////////////////////////////////////////

#[macro_export]
macro_rules! action {
    ($ctx:ident, $name:literal, $command:literal $(,)?) => {{"{{"}}
        action!($ctx, cwd: ".", step!($name, $command));
    {{"}}"}};

    ($ctx:ident, step!($name:literal, $command:literal $(,)?) $(,)?) => {{"{{"}}
        action!($ctx, cwd: ".", step!($name, $command));
    {{"}}"}};

    (
        $ctx:ident,
        step!($name:literal, $command:literal $(,)?),
        $(step!($names:literal, $commands:literal $(,)?)),+
        $(,)?
    ) => {{"{{"}}
        action!(
            $ctx,
            cwd: ".",
            step!($name, $command),
            $(step!($names, $commands)),+
        );
    {{"}}"}};

    ($ctx:ident, cwd: $cwd:literal, $name:literal, $command:literal $(,)?) => {{"{{"}}
        action!($ctx, cwd: $cwd, step!($name, $command));
    {{"}}"}};

    (
        $ctx:ident,
        cwd: $cwd:literal,
        step!($name:literal, $command:literal $(,)?)
        $(,)?
    ) => {{"{{"}}
        let _push_dir = $ctx.sh.push_dir($cwd);
        let result = step!($ctx, $name, $command);
        $ctx.checks += 1;
        let message = if result.is_ok() {
            "✅ PASSED".bold().green()
        } else {
            $ctx.errors += 1;
            "❌ FAILED".bold().red()
        };

        println!("{message}");
    {{"}}"}};

    (
        $ctx:ident,
        cwd: $cwd:literal,
        step!($name:literal, $command:literal $(,)?),
        $(step!($names:literal, $commands:literal $(,)?)),+
        $(,)?
    ) => {{"{{"}}
        let _push_dir = $ctx.sh.push_dir($cwd);
        let result = step!($ctx, $name, $command);
        if result.is_ok() {
            println!();
            action!($ctx, $(step!($names, $commands)),+);
        } else {
            $ctx.checks += 1;
            $ctx.errors += 1;
            let message = "❌ FAILED".bold().red();
            println!("{message}");
        }
    {{"}}"}};
}

#[macro_export]
macro_rules! step {
    ($ctx:ident, $name:literal, $command:literal $(,)?) => {{"{{"}}
        let _step = Step::new($name);
        cmd!($ctx.sh, $command).run()
    {{"}}"}};
}

struct Step;

impl Step {
    pub fn new(name: &'static str) -> Self {
        let message = if env::var_os("GITHUB_ACTIONS").is_some() {
            format!("::group::{name}")
        } else {
            format!("\n==> {name}...").bold().to_string()
        };

        println!("{message}");

        Self
    }
}

impl Drop for Step {
    fn drop(&mut self) {
        if env::var_os("GITHUB_ACTIONS").is_some() {
            println!("::endgroup::");
        }
    }
}

fn check_result(ctx: &Context) {
    let Context { checks, errors, .. } = ctx;

    let s = if *checks == 1 { "" } else { "s" };
    let have = |n| if n == 1 { "has" } else { "have" };

    if *errors == 0 {
        let have = have(*checks);
        let message = format!("✅ {checks}/{checks} check{s} {have} passed!")
            .bold()
            .green();
        println!("\n{message}");
    } else {
        let have = have(*errors);
        let message = format!("❌ {errors}/{checks} check{s} {have} failed!")
            .bold()
            .red();
        eprintln!("\n{message}");
        process::exit(1);
    }
}

fn get_current_branch() -> String {
    let git_branch = Command::new("git")
        .args(["branch", "--show-current"])
        .output()
        .unwrap();

    assert!(
        git_branch.status.success(),
        "Failed to run `git branch --show-current`"
    );

    String::from_utf8(git_branch.stdout)
        .unwrap()
        .trim()
        .to_owned()
}

fn get_merge_base(into: &str) -> String {
    let git_merge_base = Command::new("git")
        .args(["merge-base", into, "HEAD"])
        .output()
        .unwrap();

    assert!(
        git_merge_base.status.success(),
        "Failed to run `git merge-base origin/develop HEAD`"
    );

    String::from_utf8(git_merge_base.stdout)
        .unwrap()
        .trim()
        .to_owned()
}
