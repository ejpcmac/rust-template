{{license-header}}
//! {{description}}

#![no_std]
#![no_main]

use defmt_rtt as _;
use panic_probe as _;

#[rtic::app(device = {{crate_name}}_board::hal, dispatchers = [])]
mod app {
    use {{crate_name}}_board::{Board, Config};

    #[shared]
    struct SharedResources {}

    #[local]
    struct LocalResources {}

    /// The name and version of the firmware.
    const FW_INFO: &str =
        concat!(env!("CARGO_PKG_NAME"), " ", env!("VERSION_WITH_GIT"));

    #[init]
    fn init(_cx: init::Context) -> (SharedResources, LocalResources) {
        defmt::info!("Starting {}...", FW_INFO);

        let _board = Board::init(Config::default());

        defmt::info!("Firmware initialised!");

        (SharedResources {}, LocalResources {})
    }

    #[idle]
    fn idle(_: idle::Context) -> ! {
        loop {
            cortex_m::asm::nop();
        }
    }
}
