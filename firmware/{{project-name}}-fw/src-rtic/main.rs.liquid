{{license-header}}
//! The firmware integrating the {{project-name}} app.

#![no_std]
#![no_main]
#![expect(clippy::partial_pub_fields, reason = "generated by RTIC")]

use defmt_rtt as _;
use panic_probe as _;

#[rtic::app(device = {{crate_name}}_board::hal, dispatchers = [])]
mod app {
    use {{crate_name}}_app::{BlinkTask, {{project-name|upper_camel_case}}App};
    use {{crate_name}}_board::{Board, Config, Led};

    #[shared]
    struct SharedResources {}

    #[local]
    struct LocalResources {}

    rtic_monotonics::systick_monotonic!(Mono, 1000);

    /// The name and version of the firmware.
    const FW_INFO: &str =
        concat!(env!("CARGO_PKG_NAME"), " ", env!("VERSION_WITH_GIT"));

    #[init]
    fn init(cx: init::Context) -> (SharedResources, LocalResources) {
        defmt::info!("Starting {}...", FW_INFO);

        let board = Board::init(Config::default());

        #[cfg(feature = "feather-nrf52840")]
        let led = board.red_led;
        #[cfg(feature = "nucleo-l476rg")]
        let led = board.ld2;

        #[cfg(feature = "feather-nrf52840")]
        Mono::start(cx.core.SYST, 64_000_000);
        #[cfg(feature = "nucleo-l476rg")]
        Mono::start(cx.core.SYST, 4_000_000);

        let app = {{project-name|upper_camel_case}}App::new(led, Mono);

        defmt::expect!(
            blink::spawn(app.blink),
            "failed to spawn the blink task"
        );

        defmt::info!("Firmware initialised!");

        (SharedResources {}, LocalResources {})
    }

    #[task]
    async fn blink(_: blink::Context, mut task: BlinkTask<Led, Mono>) {
        task.run().await;
    }
}
