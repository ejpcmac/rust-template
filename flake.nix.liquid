{
  description = "{{description}}";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";

    flake-parts = {
      url = "github:hercules-ci/flake-parts";
      inputs.nixpkgs-lib.follows = "nixpkgs";
    };

    devshell = {
      url = "github:numtide/devshell";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    rust-overlay = {
      url = "github:oxalica/rust-overlay";
      inputs.nixpkgs.follows = "nixpkgs";
    };{% if project-type == "CLI" %}

    naersk = {
      url = "github:nix-community/naersk";
      inputs.nixpkgs.follows = "nixpkgs";
    };{% endif %}

    git-z = {
      url = "https://flakehub.com/f/ejpcmac/git-z/*";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = { {% if project-type == "CLI" %}self, {% endif %}flake-parts, ... }@inputs:
    flake-parts.lib.mkFlake { inherit inputs; } {
      imports = [ inputs.devshell.flakeModule ];
      systems = [ "x86_64-linux" "x86_64-darwin" "aarch64-darwin" ];

      perSystem = { {% if project-type == "CLI" %}self', {% endif %}inputs', system, ... }:
        let
          overlays = [ (import inputs.rust-overlay) ];
          pkgs = import inputs.nixpkgs { inherit system overlays; };
          rust-toolchain =
            pkgs.rust-bin.fromRustupToolchainFile ./rust-toolchain.toml;
        in
        {{"{"}}{% if project-type == "CLI" %}
          ######################################################################
          ##                             Packages                             ##
          ######################################################################

          packages =
            let
              packageName = "{{project-name}}";

              naersk = pkgs.callPackage inputs.naersk {
                cargo = rust-toolchain;
                rustc = rust-toolchain;
              };
            in
            {
              default = self'.packages.${packageName};

              ${packageName} = naersk.buildPackage {
                name = packageName;
                version = "0.1.0-dev.0";
                src = ./.;
                RUSTFLAGS = "-A missing_docs";
                FLAKE_REVISION = self.shortRev or
                  (builtins.replaceStrings [ "dirty" ] [ "modified" ]
                    self.dirtyShortRev);
              };
            };
{% endif %}
          ######################################################################
          ##                            Devshells                             ##
          ######################################################################

          devshells =
            let
              git-z = inputs'.git-z.packages.git-z;

              buildToolchain = with pkgs; [{% if project-type == "CLI" %}
                pkg-config{% endif %}
                rust-toolchain{% if project-kind == "embedded" %}
                flip-link{% endif %}
              ] ++ lib.optionals (!stdenv.isDarwin) [
                clang
              ];

              checkToolchain = with pkgs; [
                cargo-hack
                cargo-nextest
                committed
                eclint
                nixpkgs-fmt
                nodePackages.prettier
                taplo
                typos
              ];

              ideToolchain = with pkgs; [
                nixd
                rust-analyzer
              ];

              developmentTools = with pkgs; [
                cargo-bloat
                cargo-outdated
                cargo-watch
                git
                git-z
                gitAndTools.gitflow{% if project-kind == "embedded" %}
                cargo-binutils
                gcc-arm-embedded
                openocd
                probe-rs{% endif %}
              ];{% if project-type == "CLI" %}

              # NOTE: pkg-config needs this variable to detect libraries
              # installed in the devshell.
              buildEnv = [
                {
                  name = "PKG_CONFIG_PATH";
                  prefix = "$DEVSHELL_DIR/lib/pkgconfig";
                }
              ];{% endif %}{% if project-kind != "embedded" %}

              devEnv = [
                {
                  name = "RUSTFLAGS";
                  value = "-Clink-arg=-fuse-ld=${pkgs.mold}/bin/mold";
                }
              ];{% endif %}

              ideEnv = [
                {
                  name = "NIX_PATH";
                  value = "nixpkgs=${inputs.nixpkgs}";
                }
                {
                  name = "TYPOS_LSP_PATH";
                  value = "${pkgs.typos-lsp}/bin/typos-lsp";
                }
              ];
            in
            {
              default = {
                name = "{{project-name}}";

                motd = ''

                  {202}ðŸ”¨ Welcome to the {{project-name}} devshell!{reset}
                '';{% if project-type == "CLI" %}

                # TODO: Uncomment to include the runtime dependencies.
                # packagesFrom = [ self'.packages.default ];{% endif %}

                packages =
                  buildToolchain
                  ++ checkToolchain
                  ++ ideToolchain
                  ++ developmentTools;

                env =
                  {% if project-type == "CLI" %}buildEnv
                  ++ {% endif %}{% if project-kind != "embedded" %}devEnv
                  ++ {% endif %}ideEnv;

                commands = [{% if project-type == "CLI" %}
                  {
                    name = "build-deb";
                    command = "cargo deb --target=x86_64-unknown-linux-musl";
                  }
{% endif %}
                  # Pass-through commands to make some cargo extensions run in
                  # their own devshell.{% if project-type == "CLI" %}
                  {
                    name = "cargo-deb";
                    command = "nix develop -L .#deb -c cargo $@";
                  }{% endif %}
                  {
                    name = "cargo-udeps";
                    command = "nix develop -L .#udeps -c cargo $@";
                  }
                ];
              };

              ci = {
                name = "{{project-name}} CI";{% if project-type == "CLI" %}

                # TODO: Uncomment to include the runtime dependencies.
                # packagesFrom = [ self'.packages.default ];{% endif %}

                packages =
                  buildToolchain
                  ++ checkToolchain;{% if project-type == "CLI" %}

                env =
                  buildEnv;{% endif %}
              };{% if project-type == "CLI" %}

              # NOTE: Use the musl target to build a statically-linked binary.
              # We add the target in a specialised devshell to avoid cluttering
              # the toolchain defined in `rust-toolchain.toml` on all platforms.
              deb = {
                name = "cargo-deb";
                packages = with pkgs; [
                  (rust-toolchain.override {
                    targets = [ "x86_64-unknown-linux-musl" ];
                  })
                  clang
                  cargo-deb
                ];

                env = [
                  {
                    name = "TARGET_CC";
                    value = "${pkgs.pkgsCross.musl64.clang}/bin/clang";
                  }
                ];
              };{% endif %}

              # NOTE: cargo-udeps needs Rust nightly to run.
              udeps = {
                name = "cargo-udeps";
                packages = with pkgs; [{% if project-kind == "embedded" %}
                  (rust-bin.nightly."2025-07-01".minimal.override {
                    targets = [ "thumbv7em-none-eabihf" ];
                  }){% else %}
                  rust-bin.nightly."2025-07-01".minimal{% endif %}
                  clang
                  cargo-hack
                  cargo-udeps
                ];
              };
            };
        };
    };
}
